{
  // Place your frontend-advanced workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create custom react function component": {
    "prefix": ["crfc"],
    "body": [
      "import { classNames } from 'shared/lib/classNames/classNames';",
      "import cls from './${TM_FILENAME_BASE}.module.scss';",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "\tclassName?: string;",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = (props) => {",
      "\tconst { className } = props;",
      "",
      "\treturn (",
      "\t\t<div className={classNames(cls.${TM_FILENAME_BASE/(^.)/${1:/downcase}/}, {}, [className])}>",
      "\t\t\t$0",
      "\t\t</div>",
      " );",
      "}"
    ],
    "description": "Создать React-компонент по умолчанию. Импортируется scss-модуль и функция для работы c классами classNames."
  }
}
